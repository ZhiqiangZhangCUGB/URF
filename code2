import numpy as np
import pandas as pd
from sklearn.ensemble import RandomForestClassifier
class URF(RandomForestClassifier):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.leafs_content = None 
        self._labels = None
        self.used_features = None
    def fit(self, X, y, sample_weight=None):
        super().fit(X, y, sample_weight=sample_weight)
        self.leafs_content = self._binary_leaf_split_counter(X, y)
        self._labels = list(set(y))
        self.used_features = self._output_used_features(X)
    def predictprobawithu(self, X_test) -> (np.ndarray, List[Uncertainty]):
        predictions = self.predict_proba_1d(X_test)
        end_leafs = self.apply(X_test)
        uncertainties = self._extract_uncertainty_of_prediction(end_leafs)
        return predictions, uncertainties
    def predict(self, x: pd.DataFrame) -> np.ndarray:
        res = self.predict_proba(x)
        if isinstance(res, pd.Series): 
            return res
        if isinstance(res, list):
            res = np.asarray(res)
        res = res.squeeze()
        if len(res.shape) = 1:  
            if len(x) > 1: 
                assert len(res.shape) == 2 and res.shape[1] == 2{res.shape}
                res = res[:, 1]
        elif len(x) == 1 and len(res) == 2: 
            res = res[1]
        predictions = res
        return predictions
    def _euprediction(self, end_leafs):
        uncertainty = []
            for row in end_leafs:  
                uncertainty.append(calculate_entropy_uncertainties(self._labels, row, self.leafs_content))
        return uncertainty

